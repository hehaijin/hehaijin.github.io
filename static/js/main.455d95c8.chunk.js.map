{"version":3,"sources":["logo.svg","components/ModelConverter/ModelConverter.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","ModelConverter","DisabledFields","inputRef","React","createRef","outputRef","state","inputText","outputText","json","input","this","trim","left","indexOf","right","lastIndexOf","JSON","parse","substring","err","alert","r","Object","keys","key","config","label","type","endsWith","includes","disabled","push","setState","stringify","v","target","value","current","select","document","execCommand","className","onClick","convert","clear","ref","id","placeholder","onChange","handleInputChange","copy","readOnly","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+JAAAA,EAAOC,QAAU,IAA0B,kC,4JCM9BC,G,MAAb,kDAIC,aAAe,IAAD,8BACb,gBAJDC,eAAiB,CAAC,aAAc,aAAc,WAAY,YAKzD,EAAKC,SAAWC,IAAMC,YACtB,EAAKC,UAAYF,IAAMC,YACvB,EAAKE,MAAS,CACbC,UAAW,KACXC,WAAY,IANA,EAJf,sDAqBE,IAGIC,EAHAC,EAAQC,KAAKL,MAAMC,UAAUK,OAC7BC,EAAOH,EAAMI,QAAQ,KACrBC,EAAQL,EAAMM,YAAY,KAE9B,IACCP,EAAOQ,KAAKC,MAAMR,EAAMS,UAAUN,EAAME,EAAQ,IAC/C,MAAOK,GAER,YADAC,MAAMD,GAIP,IADA,IAAIE,EAAI,GACR,MAAgBC,OAAOC,KAAKf,GAA5B,eAAmC,CAA9B,IAAIgB,EAAG,KACPC,EAAS,GACbA,EAAOC,MAAQF,EACU,mBAAdhB,EAAKgB,KACfC,EAAOE,KAAO,WAEU,kBAAdnB,EAAKgB,IAAqBA,EAAII,SAAS,UACjDH,EAAOE,KAAO,QAEXjB,KAAKV,eAAe6B,SAASL,KAAMC,EAAOK,UAAW,GACzDT,EAAEU,KAAKN,GAERf,KAAKsB,SAAS,CACbzB,WAAYS,KAAKiB,UAAUZ,OA7C9B,wCAkDmBa,GACjBxB,KAAKsB,SAAS,CAAE1B,UAAW4B,EAAEC,OAAOC,UAnDtC,6BAuDE1B,KAAKN,UAAUiC,QAAQC,SACvBC,SAASC,YAAY,UAxDvB,8BA4DE9B,KAAKT,SAASoC,QAAQD,MAAM,KA5D9B,+BA+DW,IAAD,OACR,OACC,6BACC,gDACA,6BACA,4BAAQK,UAAU,kBAAkBC,QAAS,kBAAM,EAAKC,YAAxD,WACA,6BACA,6BACA,yBAAKF,UAAU,QAAf,WACS,4BAAQC,QAAS,kBAAM,EAAKE,SAASH,UAAU,2BAA/C,SACR,6BACA,8BAAUI,IAAKnC,KAAKT,SAAU6C,GAAG,YAAYC,YAAY,4BAA4BC,SAAU,SAACd,GAAD,OAAO,EAAKe,kBAAkBf,OAG9H,yBAAKO,UAAU,SAAf,UACQ,4BAAQC,QAAS,kBAAM,EAAKQ,QAAQT,UAAU,0BAA9C,QACP,6BACA,8BAAUI,IAAKnC,KAAKN,UAAW0C,GAAG,aAAaK,UAAQ,EAACf,MAAO1B,KAAKL,MAAME,aAH3E,UA7EJ,GAAoCL,IAAMkD,YCU3BC,MARf,WACE,OACE,yBAAKZ,UAAU,OACb,kBAAC,EAAD,QCCca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFtB,SAASuB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.455d95c8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import './ModelConverter.css'\r\n\r\nimport React, { useContext, useEffect, useState, useRef } from \"react\";\r\n\r\n\r\n\r\nexport class ModelConverter extends React.Component {\r\n\tDisabledFields = ['CreateDate', 'CreateUser', 'EditDate', 'EditUser'];\r\n\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.inputRef = React.createRef();\r\n\t\tthis.outputRef = React.createRef();\r\n\t\tthis.state = ({\r\n\t\t\tinputText: \"ss\",\r\n\t\t\toutputText: \"\"\r\n\t\t});\r\n\r\n\t}\r\n\r\n\r\n\r\n\r\n\r\n\tconvert() {\r\n\r\n\t\tlet input = this.state.inputText.trim();\r\n\t\tlet left = input.indexOf('{');\r\n\t\tlet right = input.lastIndexOf('}');\r\n\t\tlet json;\r\n\t\ttry {\r\n\t\t\tjson = JSON.parse(input.substring(left, right + 1));\r\n\t\t} catch (err) {\r\n\t\t\talert(err);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet r = [];\r\n\t\tfor (let key of Object.keys(json)) {\r\n\t\t\tlet config = {};\r\n\t\t\tconfig.label = key;\r\n\t\t\tif (typeof json[key] === 'boolean') {\r\n\t\t\t\tconfig.type = 'boolean';\r\n\t\t\t}\r\n\t\t\tif (typeof json[key] === 'string' && key.endsWith('Date')) {\r\n\t\t\t\tconfig.type = 'date';\r\n\t\t\t}\r\n\t\t\tif (this.DisabledFields.includes(key)) config.disabled = true;\r\n\t\t\tr.push(config);\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\toutputText: JSON.stringify(r)\r\n\t\t});\r\n\r\n\t}\r\n\r\n\thandleInputChange(v) {\r\n\t\tthis.setState({ inputText: v.target.value });\r\n\t}\r\n\r\n\tcopy() {\r\n\t\tthis.outputRef.current.select();\r\n\t\tdocument.execCommand('copy');\r\n\t}\r\n\r\n\tclear(){\r\n\t\tthis.inputRef.current.value=\"\";\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h1> Model Converter</h1>\r\n\t\t\t\t<br></br>\r\n\t\t\t\t<button className=\"btn btn-primary\" onClick={() => this.convert()} >convert</button>\r\n\t\t\t\t<br></br>\r\n\t\t\t\t<br></br>\r\n\t\t\t\t<div className=\"left\" >\r\n\t\t\t\t\tINPUT   <button onClick={() => this.clear()} className=\"clear btn btn-secondary\">clear</button>\r\n\t\t\t\t\t<br></br>\r\n\t\t\t\t\t<textarea ref={this.inputRef} id=\"inputtext\" placeholder=\"Put your input model here\" onChange={(v) => this.handleInputChange(v)}  >\r\n\t\t\t\t\t</textarea>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"right\">\r\n\t\t\t\t\tOUTPUT <button onClick={() => this.copy()} className=\"copy btn btn-secondary\">copy</button>\r\n\t\t\t\t\t<br></br>\r\n\t\t\t\t\t<textarea ref={this.outputRef} id=\"outputtext\" readOnly value={this.state.outputText}>\r\n\t\t\t\t\t</textarea> </div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { ModelConverter } from \"./components/ModelConverter/ModelConverter\";\n\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ModelConverter></ModelConverter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}